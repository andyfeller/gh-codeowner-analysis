#!/usr/bin/env bash
set -e

QUERY_ANALYZE_BASE='
	query ($owner: String!, $repo: String!) {
	  repository(owner:$owner, name:$repo) {
	    defaultBranchRef {
	      branchProtectionRule {
	        requiresCodeOwnerReviews
	        requiredApprovingReviewCount
	      }
	    }
	    codeowners {
	      errors {
	        kind
	        suggestion
	        source
	        path
	        message
	        line
	        column
	      }
	    }
	  }
	}
'

QUERY_ANALYZE_CODEOWNERS_GITHUB='
	query ($owner: String!, $repo: String!) {
	  repository(owner:$owner, name:$repo) {
	    object(expression: "HEAD:.github/CODEOWNERS") {
	      ... on Blob {
	        text
	        commitUrl
	        byteSize
	        abbreviatedOid
	      }
	    }
	  }
	}
'

QUERY_ANALYZE_CODEOWNERS_BASE='
	query ($owner: String!, $repo: String!) {
	  repository(owner:$owner, name:$repo) {
	    object(expression: "HEAD:CODEOWNERS") {
	      ... on Blob {
	        text
	        commitUrl
	        byteSize
	        abbreviatedOid
	      }
	    }
	  }
	}
'

QUERY_ANALYZE_COLLABORATORS='
	query ($owner: String!, $repo: String!, $endCursor: String) {
	  repository(owner:$owner, name:$repo) {
	    collaborators(first: 100, affiliation: DIRECT, after: $endCursor) {
	      pageInfo {
	        endCursor
	        hasNextPage
	      }
	      edges {
	        permission
	        node {
	          isEmployee
	          login
	        }
	      }
	    }
	  }
	}
'

function analyze_repo() {
	local REPO="$1"
	echo "$OWNER/$REPO:  analyze repository"

	# Capture branch protection rules around codeowners are setup on default branch and codeowner errors
	FILE_ANALYZE_BASE="$CACHEDIR/$OWNER-$REPO-base.json"

	if ! test -f "$FILE_ANALYZE_BASE"; then
		echo "$OWNER/$REPO:  pulling repository codeowner errors and branch protection"
		gh api graphql -f query="${QUERY_ANALYZE_BASE}" -F owner=$OWNER -F repo=$REPO >> $FILE_ANALYZE_BASE
	else
		echo "$OWNER/$REPO:  skip pulling repository codeowner errors and branch protection"
	fi

	# Determine whether codeowners are managed in repository root directory
	FILE_ANALYZE_CODEOWNERS_GITHUB="$CACHEDIR/$OWNER-$REPO-codeowners-github.json"

	if ! test -f "$FILE_ANALYZE_CODEOWNERS_GITHUB"; then
		echo "$OWNER/$REPO:  pulling repository codeowner in .github"
		gh api graphql -f query="${QUERY_ANALYZE_CODEOWNERS_GITHUB}" -F owner=$OWNER -F repo=$REPO >> $FILE_ANALYZE_CODEOWNERS_GITHUB
	else
		echo "$OWNER/$REPO:  skip pulling repository codeowner in .github"
	fi

	# Determine whether codeowners are managed in repository .github directory
	FILE_ANALYZE_CODEOWNERS_ROOT="$CACHEDIR/$OWNER-$REPO-codeowners-base.json"

	if ! test -f "$FILE_ANALYZE_CODEOWNERS_ROOT"; then
		echo "$OWNER/$REPO:  pulling repository codeowner in root"
		gh api graphql -f query="${QUERY_ANALYZE_CODEOWNERS_BASE}" -F owner=$OWNER -F repo=$REPO >> $FILE_ANALYZE_CODEOWNERS_ROOT
	else
		echo "$OWNER/$REPO:  skip pulling repository codeowner in root"
	fi

	# Pull repository collaborators
	FILE_ANALYZE_COLLABORATORS="$CACHEDIR/$OWNER-$REPO-collaborators.json"

	if ! test -f "$FILE_ANALYZE_COLLABORATORS"; then
		echo "$OWNER/$REPO:  pulling repository collaborators"
		gh api graphql -f query="${QUERY_ANALYZE_COLLABORATORS}" -F owner=$OWNER -F repo=$REPO --paginate >> $FILE_ANALYZE_COLLABORATORS
	else
		echo "$OWNER/$REPO:  skip pulling repository collaborators"
	fi

	# Extract data for report from cache
	CODEOWNER_ERRORS=$(jq '.data.repository.codeowners.errors | length' $FILE_ANALYZE_BASE)
    BPR_EXISTS=$(jq '.data.repository.defaultBranchRef?.branchProtectionRule? | if . == null then false else true end' $FILE_ANALYZE_BASE)
    BPR_CODEOWNERS_REQUIRED=$(jq '.data.repository.defaultBranchRef?.branchProtectionRule?.requiresCodeOwnerReviews // false' $FILE_ANALYZE_BASE)
    BPR_CODEOWNERS_REVIEWS=$(jq '.data.repository.defaultBranchRef?.branchProtectionRule?.requiredApprovingReviewCount // 0' $FILE_ANALYZE_BASE)

	CODEOWNERS_GITHUB_EXISTS=$(jq '.data.repository.object? | has("abbreviatedOid")' $FILE_ANALYZE_CODEOWNERS_GITHUB)
	CODEOWNERS_ROOT_EXISTS=$(jq '.data.repository.object? | has("abbreviatedOid")' $FILE_ANALYZE_CODEOWNERS_ROOT)

	echo "$OWNER/$REPO:  output results; CODEOWNERS_GITHUB_EXISTS=$CODEOWNERS_GITHUB_EXISTS, CODEOWNERS_ROOT_EXISTS=$CODEOWNERS_ROOT_EXISTS, CODEOWNER_ERRORS=$CODEOWNER_ERRORS, BPR_EXISTS=$BPR_EXISTS, BPR_CODEOWNERS_REQUIRED=$BPR_CODEOWNERS_REQUIRED, BPR_CODEOWNERS_REVIEWS=$BPR_CODEOWNERS_REVIEWS"
	printf "%s\n" $OWNER $REPO $CODEOWNERS_GITHUB_EXISTS $CODEOWNERS_ROOT_EXISTS $CODEOWNER_ERRORS $BPR_EXISTS $BPR_CODEOWNERS_REQUIRED $BPR_CODEOWNERS_REVIEWS | paste -sd ',' - >> $OUTPUTFILE
}

FORCE=false
CACHEDIR=
OWNER=
OUTPUTFILE=
PRESERVE=false
REPO=

__USAGE="
Analyze and report on GitHub codeowner usage.

USAGE
  $(basename $0) [options] <owner>
  $(basename $0) [options] <owner>/<repo>

FLAGS
  -c, --cache-dir <cache-dir>         Name of directory containing preserved data to reuse
  -d, --debug                         Enable debugging
  -f, --force                         Whether to overwrite output file if it exists
  -h, --help                          Displays help usage
  -o, --output-file <output-file>     Name of GitHub report file to generate, without '.csv' extension
  -p, --preserve                      Preserve temporary directory containing data
";

die() {
	printf "\nError: %s\n" "$1"
	echo "$__USAGE"
	exit 1
}

if ! type -p gh > /dev/null; then
	die "'gh' could not be found"
fi

if ! type -p jq > /dev/null; then
	die "'jq' could not be found"
fi

while getopts "c:dfho:p-:" OPT; do
	if [ "$OPT" = "-" ]; then    # long option: reformulate OPT and OPTARG
		OPT="${OPTARG%%=*}"      # extract long option name
		OPTARG="${OPTARG#$OPT}"	 # extract long option argument (may be empty)
		OPTARG="${OPTARG#=}"     # if long option argument, remove assigning `=`
	fi

	case "$OPT" in

		cache-dir | c)
			CACHEDIR="${OPTARG}"
			;;

		debug | d)
			set -x
			;;

		force | f)
			FORCE=true
			;;

		help | h)
			echo "$__USAGE"
			exit 0
			;;

		output-file | o)
			OUTPUTFILE="${OPTARG}.csv"
			;;

		preserve | p)
			PRESERVE=true
			;;
	esac
done

# shift so that $@, $1, etc. refer to the non-option arguments
shift "$((OPTIND-1))"

if [ -z "$1" ]; then
	die "Must provide owner or owner/repo"
elif [[ "$1" == *"/"* ]]; then
	OWNER=$(echo $1 | cut -d '/' -f 1)
	REPO=$(echo $1 | cut -d '/' -f 2)

	if [ -z "${OUTPUTFILE}" ]; then
		OUTPUTFILE="$OWNER-$REPO.csv"
	fi
else
	OWNER="$1"

	if [ -z "${OUTPUTFILE}" ]; then
		OUTPUTFILE="$OWNER.csv"
	fi
fi

# Handle situation if previous report file exists
if test -f "$OUTPUTFILE"; then

	if ! $FORCE; then
		die "$OUTPUTFILE exists; -f, --force will delete if exists"
	fi

	echo "Deleting previous report file:  $OUTPUTFILE"
	rm -f $OUTPUTFILE
fi

# Prepare temporary working directory for caching data
if test -d "$CACHEDIR"; then
	echo "Using existing directory for caching data:  $CACHEDIR"
elif [ -z "$CACHEDIR" ]; then
	CACHEDIR="$(mktemp -d -t gh-codeowner-analysisXXX)"
	echo "Created temporary directory for caching data:  $CACHEDIR"

	if ! $PRESERVE; then
		trap 'rm -rf -- "$CACHEDIR"' EXIT
	fi
else
	mkdir -p $CACHEDIR
	echo "Created directory for caching data:  $CACHEDIR"
fi

# Begin analyzing repositories
printf "%s\n" 'OWNER' 'REPO' 'CODEOWNERS_GITHUB_EXISTS' 'CODEOWNERS_ROOT_EXISTS' 'CODEOWNER_ERRORS' 'BPR_EXISTS' 'BPR_CODEOWNERS_REQUIRED' 'BPR_CODEOWNERS_REVIEWS' | paste -sd ',' - >> $OUTPUTFILE

if [ -z "${REPO}" ]; then
	echo "$OWNER:  pulling repositories for analysis"

	QUERY='
		query ($owner: String!, $endCursor: String) {
		  repositoryOwner(login: $owner) {
		    repositories(first: 100, after: $endCursor) {
		      pageInfo {
		        endCursor
		        hasNextPage
		      }
		      nodes {
		        name
		      }
		    }
		  }
		}
	'

	for repo in $(gh api graphql -f query="${QUERY}" -F owner="$OWNER" --paginate --jq '.data.repositoryOwner.repositories.nodes[].name'); do
		analyze_repo "$repo"
	done
else
	analyze_repo "$REPO"
fi
